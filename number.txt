существует возможность записывать числа с большим колчеством нулей чтобы, не потеряться  
таким образом 
let someBigNum = 1e6; //1 * 1 000 000
console.log(someBigNum)
маленькие числа записываются таким же образом только  минусом 

// метод toString преобразовывает числа в любую систему счисления
возвращает строку
let num = 255;
console.log(num.toString(16));
console.log(num.toString(8));
console.log(num.toString(2));
Метод Math.round округляет до ближайшего целого, к примеру 5.845
 округлится до шести, в случае когда нам нужно округлить до до 5.8 
 необходимо использовать способ умнржения и деления на  10 или на 100, 
 если нужно округлить до десятых испотльзуем умножение и деление на 10
 если нужно округлить до сотых тогда умножаем и делим на 100
Метод toFixed округляет до энего количества знаков после занпятой и  возвращает результат с типом данных строка
для преобразования строк в числа можно использовать унарный оператор плюс вызвав в консоле переменную с плюсом впереди
проблемы появляются из маленьких чисел в конце
//решение проблемы с помощью Number.EPSILON - это очень маленькое число , прибавив его к исходному числу 
мы решаем нашу проблему
Nan никгда не равен  Nan (возвращает фолс при сравнении этих типов)
бывает такое что опреденные операторы подходят только под пределенные типы данных
//isFinite преобразовывает в числовой тип данных и возвращает булевое значение
мы можем преобразовывть сроки в номер, но бывают случаи когда в строке содержиться единица измерения 
или текст , тогда преобразование становиться невозможным , консоль возвращает нан 
parseInt возвращает целое число и может преобразовывать числа в другие системы счисления and 
parseFloat возвращает число с плавающей точкой
console.log(parseInt('0xff', 16));

console.log(Math.random()); - возвращает рвндомные числа от нуля включая ноль и до 1 не включая единицу